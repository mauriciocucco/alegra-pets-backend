service: alegra-pets-backend

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${env:STAGE, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - ${env:FOUNDATIONS_TABLE_ARN}
            - ${env:PETS_TABLE_ARN}
            - ${env:PETS_TABLE_ARN}/index/FoundationNameIndex
            - ${env:USERS_TABLE_ARN}
            - ${env:USERS_TABLE_ARN}/index/emailIndex
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - ${env:PET_HAPPY_TOPIC_ARN}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - ${env:REQUESTS_BUCKET_ARN}/*

  httpApi:
    name: petsHttpApi
    cors: false
    authorizers:
      myLambdaAuthorizer:
        type: request
        # This name must match the "name" of your authorizer function
        functionName: myAuthorizer
        identitySource:
          - $request.header.Authorization
        authorizerPayloadFormatVersion: 2.0

  environment:
    FOUNDATIONS_TABLE_NAME: ${env:FOUNDATIONS_TABLE_NAME}
    PETS_TABLE_NAME: ${env:PETS_TABLE_NAME}
    USERS_TABLE_NAME: ${env:USERS_TABLE_NAME}
    PET_HAPPY_TOPIC_ARN: ${env:PET_HAPPY_TOPIC_ARN}
    REQUESTS_BUCKET_NAME: ${env:REQUESTS_BUCKET_NAME}

plugins:
  - serverless-dotenv-plugin
  - serverless-openapi-documenter
  # - serverless-offline

layers:
  shared:
    path: layers/nodejs
    name: ${self:service}-shared-layer
    compatibleRuntimes:
      - nodejs20.x

functions:
  # Lambda Authorizer
  myAuthorizer:
    handler: src/authorizer/authorizer.handler
    environment:
      USERS_TABLE_NAME: ${env:USERS_TABLE_NAME}
      PETS_TABLE_NAME: ${env:PETS_TABLE_NAME}

  # Crear Fundación
  createFoundation:
    handler: src/handlers/createFoundation.handler
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - httpApi:
          path: /foundations
          method: post
          documentation:
            summary: "Create Foundation"
            description: "Creates a new foundation"
            requestBody:
              description: "New foundation data"
            requestModels:
              application/json: "CreateFoundationRequest"
            methodResponses:
              - statusCode: 201
                responseBody:
                  description: "Foundation created"
                responseModels:
                  application/json: "CreateFoundationResponse"
              - statusCode: 403
                responseBody:
                  description: "Forbidden"
                responseModels:
                  application/json: "ForbiddenResponse"

  # Agregar una mascota
  addPet:
    handler: src/handlers/addPet.handler
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - httpApi:
          path: /pets
          method: post
          authorizer:
            name: myLambdaAuthorizer
          documentation:
            summary: "Add a new pet"
            description: "Adds a new pet to the foundation after verifying foundation access."
            requestBody:
              description: "Pet details to add"
            requestModels:
              application/json: "AddPetRequest"
            methodResponses:
              - statusCode: 201
                responseBody:
                  description: "Pet added successfully."
                responseModels:
                  application/json: "AddPetResponse"
              - statusCode: 403
                responseBody:
                  description: "Forbidden"
                responseModels:
                  application/json: "ForbiddenResponse"

  # Consultar una mascota por id
  getPet:
    handler: src/handlers/getPet.handler
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - httpApi:
          path: /pets/{petId}
          method: get
          authorizer:
            name: myLambdaAuthorizer
          documentation:
            summary: "Get Pet"
            description: "Retrieve a pet by ID"
            pathParams:
              - name: petId
                schema:
                  type: string
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Pet details"
                responseModels:
                  application/json: "GetPetResponse"
              - statusCode: 403
                responseBody:
                  description: "Forbidden"
                responseModels:
                  application/json: "ForbiddenResponse"

  # Consultar todas las mascotas de una fundación (con filtros)
  listPets:
    handler: src/handlers/listPets.handler
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - httpApi:
          path: /foundations/{foundationId}/pets
          method: get
          authorizer:
            name: myLambdaAuthorizer
          documentation:
            summary: "List Pets"
            description: "Lists pets for a foundation with optional filters."
            pathParams:
              - name: foundationId
                schema:
                  type: string
            queryParams:
              - name: type
                schema:
                  type: string
              - name: breed
                schema:
                  type: string
              - name: name
                schema:
                  type: string
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Array of pets that match the provided filters."
                responseModels:
                  application/json: "ListPetsResponse"
              - statusCode: 403
                responseBody:
                  description: "Forbidden"
                responseModels:
                  application/json: "ForbiddenResponse"

  # Eliminar una mascota
  deletePet:
    handler: src/handlers/deletePet.handler
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - httpApi:
          path: /pets/{petId}
          method: delete
          authorizer:
            name: myLambdaAuthorizer
          documentation:
            summary: "Delete Pet"
            description: "Deletes a pet by its ID."
            pathParams:
              - name: petId
                schema:
                  type: string
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Pet successfully deleted."
                responseModels:
                  application/json: "DeletePetResponse"
              - statusCode: 403
                responseBody:
                  description: "Forbidden"
                responseModels:
                  application/json: "ForbiddenResponse"

  # Actualizar una mascota
  updatePet:
    handler: src/handlers/updatePet.handler
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - httpApi:
          path: /pets/{petId}
          method: put
          authorizer:
            name: myLambdaAuthorizer
          documentation:
            summary: "Update Pet"
            description: "Updates a pet by its ID."
            pathParams:
              - name: petId
                schema:
                  type: string
            requestBody:
              description: "Fields to update in the pet record."
            requestModels:
              application/json: "UpdatePetRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Pet successfully updated."
                responseModels:
                  application/json: "UpdatePetResponse"
              - statusCode: 403
                responseBody:
                  description: "Forbidden"
                responseModels:
                  application/json: "ForbiddenResponse"

custom:
  documentation:
    outputFileName: openapi-httpapi.yml
    apiType: httpApi
    version: 1.0.0
    title: "Alegra Pets API"
    description: "API for managing pets."
    termsOfService: https://example.com/terms
    contactName: "My Team"
    contactEmail: "support@example.com"
    licenseName: "MIT"
    licenseUrl: "https://opensource.org/licenses/MIT"
    models:
      - name: ForbiddenResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
      - name: CreateFoundationRequest
        contentType: "application/json"
        schema:
          type: object
          properties:
            name:
              type: string
      - name: CreateFoundationResponse
        contentType: "application/json"
        statusCode: 201
        schema:
          type: object
          properties:
            foundationId:
              type: string
            message:
              type: string
      - name: AddPetRequest
        contentType: "application/json"
        schema:
          type: object
          properties:
            name:
              type: string
            breed:
              type: string
            status:
              type: string
            type:
              type: string
      - name: AddPetResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            petId:
              type: string
            message:
              type: string
      - name: GetPetResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            petId:
              type: string
            name:
              type: string
            breed:
              type: string
            status:
              type: string
            type:
              type: string
      - name: ListPetsResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            pets:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
      - name: Pet
        contentType: "application/json"
        schema:
          type: object
          properties:
            petId:
              type: string
            name:
              type: string
            breed:
              type: string
            status:
              type: string
            type:
              type: string
      - name: DeletePetResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            petId:
              type: string
      - name: UpdatePetRequest
        contentType: "application/json"
        schema:
          type: object
          properties:
            name:
              type: string
            breed:
              type: string
            status:
              type: string
            type:
              type: string
      - name: UpdatePetResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            pet:
              $ref: "#/components/schemas/Pet"
